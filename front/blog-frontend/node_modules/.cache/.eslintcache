[{"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/containers/write/WriteActionButtonContainer.js":"1","/Users/jaejoon/React/College-Lib/front/blog-frontend/src/App.js":"2","/Users/jaejoon/React/College-Lib/front/blog-frontend/src/pages/SearchListPage.js":"3","/Users/jaejoon/React/College-Lib/front/blog-frontend/src/pages/BoardPage.js":"4","/Users/jaejoon/React/College-Lib/front/blog-frontend/src/pages/BookInfoPage.js":"5","/Users/jaejoon/React/College-Lib/front/blog-frontend/src/pages/HomePage.js":"6","/Users/jaejoon/React/College-Lib/front/blog-frontend/src/components/common/SearchBar.js":"7","/Users/jaejoon/React/College-Lib/front/blog-frontend/src/containers/write/TagBoxContainer.js":"8","/Users/jaejoon/React/College-Lib/front/blog-frontend/src/components/write/TagBox.js":"9","/Users/jaejoon/React/College-Lib/front/blog-frontend/src/modules/write.js":"10","/Users/jaejoon/React/College-Lib/front/blog-frontend/src/pages/PostPage.js":"11","/Users/jaejoon/React/College-Lib/front/blog-frontend/src/components/post/PostViewer.js":"12","/Users/jaejoon/React/College-Lib/front/blog-frontend/src/lib/api/posts.js":"13","/Users/jaejoon/React/College-Lib/front/blog-frontend/src/modules/index.js":"14","/Users/jaejoon/React/College-Lib/front/blog-frontend/src/modules/post.js":"15","/Users/jaejoon/React/College-Lib/front/blog-frontend/src/containers/post/PostViewerContainer.js":"16"},{"size":1261,"mtime":1685539255298,"results":"17","hashOfConfig":"18"},{"size":1527,"mtime":1685539252885,"results":"19","hashOfConfig":"18"},{"size":0,"mtime":1685458628244,"results":"20","hashOfConfig":"18"},{"size":0,"mtime":1685458448034,"results":"21","hashOfConfig":"18"},{"size":0,"mtime":1685458448064,"results":"22","hashOfConfig":"18"},{"size":550,"mtime":1685461265876,"results":"23","hashOfConfig":"18"},{"size":746,"mtime":1685461273883,"results":"24","hashOfConfig":"18"},{"size":524,"mtime":1685533319715,"results":"25","hashOfConfig":"18"},{"size":4788,"mtime":1685533862548,"results":"26","hashOfConfig":"18"},{"size":1738,"mtime":1685533451236,"results":"27","hashOfConfig":"18"},{"size":367,"mtime":1685535617296,"results":"28","hashOfConfig":"18"},{"size":2770,"mtime":1685535795882,"results":"29","hashOfConfig":"18"},{"size":321,"mtime":1685539254094,"results":"30","hashOfConfig":"18"},{"size":496,"mtime":1685535353072,"results":"31","hashOfConfig":"18"},{"size":1082,"mtime":1685535223142,"results":"32","hashOfConfig":"18"},{"size":1708,"mtime":1685535552731,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"4x1vmq",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/containers/write/WriteActionButtonContainer.js",[],[],"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/App.js",[],[],"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/pages/SearchListPage.js",[],[],"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/pages/BoardPage.js",[],[],"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/pages/BookInfoPage.js",[],[],"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/pages/HomePage.js",[],[],"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/components/common/SearchBar.js",["84"],[],"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/containers/write/TagBoxContainer.js",[],[],"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/components/write/TagBox.js",["85"],[],"import React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\n\nconst TagBoxBlock = styled.div`\n  width: 100%;\n  border-top: 1px solid ${palette.gray[2]};\n  padding-top: 0.5rem;\n\n  h4 {\n    color: ${palette.gray[8]}\n    margin-top: 0;\n    margin-bottom: 0.5rem;\n  }\n`;\n\nconst TagForm = styled.form`\n  border-radius: 4px;\n  overflow: hidden;\n  display: flex;\n  width: 180px;\n  border: 1px solid ${palette.gray[9]}; /* 스타일 초기화 */\n  input,\n  button {\n    outline: none;\n    border: none;\n    font-size: 1rem;\n  }\n\n  input {\n    padding: 0.5rem;\n    flex: 1;\n  }\n  button {\n    cursor: pointer;\n    padding-right: 1rem;\n    padding-left: 1rem;\n    border: none;\n    background: ${palette.gray[8]};\n    color: white;\n    font-weight: bold;\n    &:hover {\n      background: ${palette.gray[6]};\n    }\n  }\n`;\n\nconst Tag = styled.div`\n  margin-right: 0.5rem;\n  color: ${palette.gray[6]};\n  cursor: pointer;\n  &:hover {\n    opacity: 0.5;\n  }\n`;\n\nconst TagListBlock = styled.div`\n  display: flex;\n  margin-top: 0.5rem;\n`;\n\n// // React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링되도록 처리\n// const TagItem = React.memo(({ tag, onRemove }) => (\n//   <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\n// ));\n\n// // React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\n// const TagList = React.memo(({ tags, onRemove }) => (\n//   <TagListBlock>\n//     {tags.map((tag) => (\n//       <TagItem key={tag} tag={tag} onRemove={onRemove} />\n//     ))}\n//   </TagListBlock>\n// ));\n\n// const TagBox = ({ tags, onChangeTags }) => {\n//   const [input, setInput] = useState('');\n//   const [localTags, setLocalTags] = useState([]);\n\n//   const insertTag = useCallback(\n//     (tag) => {\n//       if (!tag) return;\n//       if (localTags.includes(tag)) return;\n//       const nextTags = [...localTags, tag];\n//       setLocalTags(nextTags);\n//       onChangeTags(nextTags);\n//     },\n//     [localTags, onChangeTags],\n//   );\n\n//   const onRemove = useCallback(\n//     (tag) => {\n//       const nextTags = localTags.filtered((t) => t !== tag);\n//       setLocalTags(nextTags);\n//       onChangeTags(nextTags);\n//     },\n//     [localTags, onChangeTags],\n//   );\n\n//   const onChange = useCallback((e) => {\n//     setInput(e.target.value);\n//   }, []);\n\n//   const onSubmit = useCallback(\n//     (e) => {\n//       e.preventDefault();\n//       insertTag(input.trim()); // 앞뒤 공백 없앤 후 등록\n//       setInput(''); // input 초기화\n//     },\n//     [input, insertTag],\n//   );\n\n//   useEffect(() => {\n//     setLocalTags(tags);\n//   }, [tags]);\n\n//   return (\n//     <TagBoxBlock>\n//       <h4>태그</h4>\n//       <TagForm onSubmit={onSubmit}>\n//         <input\n//           placeholder=\"태그를 입력하세요\"\n//           value={input}\n//           onChange={onChange}\n//         />\n//         <button type=\"submit\">추가</button>\n//       </TagForm>\n//       <TagList tags={localTags} onRemove={onRemove} />\n//     </TagBoxBlock>\n//   );\n// };\n\n// export default TagBox;\n\nconst TagItem = React.memo(({ tag, onRemove }) => (\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\n));\n\nconst TagList = React.memo(({ tags, onRemove }) => (\n  <TagListBlock>{tags}</TagListBlock>\n));\n\nconst TagBox = ({ tags, onChangeTags }) => {\n  const [input, setInput] = useState('');\n  const [localTags, setLocalTags] = useState([]);\n  const options = ['삽니다', '팝니다', '질문'];\n\n  const insertTag = useCallback(\n    (tag) => {\n      if (!tag) return;\n      if (localTags.includes(tag)) return;\n      const Tags = tag;\n      setLocalTags(Tags);\n      onChangeTags(Tags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onRemove = useCallback(\n    (tag) => {\n      const nextTags = localTags.filter((t) => t !== tag);\n      setLocalTags(nextTags);\n      onChangeTags(nextTags);\n    },\n    [localTags, onChangeTags],\n  );\n\n  const onChange = useCallback((e) => {\n    setInput(e.target.value);\n  }, []);\n\n  const onSubmit = useCallback(\n    (e) => {\n      e.preventDefault();\n      insertTag(input.trim());\n      setInput('');\n    },\n    [input, insertTag],\n  );\n\n  useEffect(() => {\n    setLocalTags(tags);\n  }, [tags]);\n\n  return (\n    <TagBoxBlock>\n      <h4>태그</h4>\n      <TagForm onSubmit={onSubmit}>\n        <select value={input} onChange={onChange}>\n          <option value=\"\">태그를 선택하세요</option>\n          {options.map((option) => (\n            <option key={option} value={option}>\n              {option}\n            </option>\n          ))}\n        </select>\n        <button type=\"submit\">추가</button>\n      </TagForm>\n      <TagList tags={localTags} onRemove={onRemove} />\n    </TagBoxBlock>\n  );\n};\n\nexport default TagBox;\n",[],"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/modules/write.js",[],[],"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/pages/PostPage.js",["86"],[],"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/components/post/PostViewer.js",["87"],[],"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/lib/api/posts.js",[],[],"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/modules/index.js",[],[],"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/modules/post.js",[],[],"/Users/jaejoon/React/College-Lib/front/blog-frontend/src/containers/post/PostViewerContainer.js",["88"],[],{"ruleId":"89","severity":1,"message":"90","line":6,"column":10,"nodeType":"91","messageId":"92","endLine":6,"endColumn":14},{"ruleId":"89","severity":1,"message":"93","line":135,"column":7,"nodeType":"91","messageId":"92","endLine":135,"endColumn":14},{"ruleId":"89","severity":1,"message":"94","line":3,"column":8,"nodeType":"91","messageId":"92","endLine":3,"endColumn":18},{"ruleId":"89","severity":1,"message":"95","line":92,"column":30,"nodeType":"91","messageId":"92","endLine":92,"endColumn":43},{"ruleId":"89","severity":1,"message":"96","line":15,"column":33,"nodeType":"91","messageId":"92","endLine":15,"endColumn":37},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'TagItem' is assigned a value but never used.","'PostViewer' is defined but never used.","'publishedDate' is assigned a value but never used.","'user' is assigned a value but never used."]